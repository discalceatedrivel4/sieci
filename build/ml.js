!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";function r(){i.run(),setTimeout(function(){return r()},0)}Object.defineProperty(t,"__esModule",{value:!0});var i,s=n(4),o=n(5);process.on("message",function(e){var n=JSON.parse(e);if(i=new o.Runner,i.inputData=n.inputData,n.configData.options.inputValue){var a=JSON.parse(n.configData.options.inputValue);t.CONFIG=a.config,t.GLOBALS=a.globals,i.init(a)}else t.CONFIG=n.configData.config,t.GLOBALS=new s.Globals,i.initBasic();console.log(t.CONFIG),r()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(2),s=n(3),o=function(){function e(){this.inputs=[],this.hidden=[],this.fitness=0}return e.prototype.initBasicNetwork=function(){r.GLOBALS.currentNeuronId=0,r.GLOBALS.currentSynapseId=0;var e=new i.Neuron(r.GLOBALS.currentNeuronId++),t=new i.Neuron(r.GLOBALS.currentNeuronId++),n=new i.Neuron(r.GLOBALS.currentNeuronId++);n.value=1,this.inputs.push(e),this.inputs.push(t),this.inputs.push(n);var o=new s.Synapse(r.GLOBALS.currentSynapseId++,e);this.output=new i.Neuron(r.GLOBALS.currentNeuronId++,[o])},e.prototype.evaluate=function(){var e=this.output.getValue();this.output.calculating=!1;for(var t=0,n=this.hidden;t<n.length;t++){n[t].calculating=!1}return e},e.prototype.mutate=function(){for(var e=0,t=this.hidden;e<t.length;e++)for(var n=t[e],o=0,a=n.synapses;o<a.length;o++){var u=a[o],h=Math.random();h<r.CONFIG.weightMutation&&(u.weight=20*Math.random()-10)}for(var p=0,l=this.output.synapses;p<l.length;p++){var u=l[p];Math.random()<r.CONFIG.weightMutation&&(u.weight=20*Math.random()-10)}var v=Math.random();if(v<r.CONFIG.synapseMutation){var d=!1,f=Math.floor(Math.random()*(this.hidden.length+1+2+1)),g=Math.floor(Math.random()*(this.hidden.length+1)),c=void 0,y=void 0;c=f===this.hidden.length+3?this.output:f<3?this.inputs[f]:this.hidden[f-3],y=g===this.hidden.length?this.output:this.hidden[g];for(var w=0,N=y.synapses;w<N.length;w++){var u=N[w];if(u.origin.id===c.id){u.enabled?u.enabled=!1:u.enabled=!0,d=!0;break}}if(!d)for(var I=0,S=r.GLOBALS.synapseMutations;I<S.length;I++){var O=S[I];if(O.originId===c.id&&O.targetId===y.id){var b=new s.Synapse(O.synapseId,c);y.synapses.push(b),d=!0;break}}if(!d){var b=new s.Synapse(r.GLOBALS.currentSynapseId++,c);y.synapses.push(b),r.GLOBALS.synapseMutations.push({synapseId:b.innovation,originId:b.origin.id,targetId:y.id})}}if((v=Math.random())<r.CONFIG.neuronMutation){for(var k=[],M=0,L=this.hidden;M<L.length;M++)for(var n=L[M],G=0,A=n.synapses;G<A.length;G++){var u=A[G];k.push({synapse:u,target:n})}for(var m=0,F=this.output.synapses;m<F.length;m++){var u=F[m];k.push({synapse:u,target:this.output})}var B=k[Math.floor(Math.random()*k.length)];B.synapse.enabled=!1;for(var P=0,C=r.GLOBALS.neuronMutations;P<C.length;P++){var O=C[P];if(O.synapseId===B.synapse.innovation&&!this.doesNeuronExist(O.neuronId)){var _=new s.Synapse(O.newSynapse1Id,B.synapse.origin),j=new i.Neuron(O.neuronId,[_]);this.hidden.push(j);var W=new s.Synapse(O.newSynapse2Id,j);return void B.target.synapses.push(W)}}var D=new s.Synapse(r.GLOBALS.currentSynapseId++,B.synapse.origin),x=new i.Neuron(r.GLOBALS.currentNeuronId++,[D]);this.hidden.push(x);var z=new s.Synapse(r.GLOBALS.currentSynapseId++,x);B.target.synapses.push(z),r.GLOBALS.neuronMutations.push({neuronId:x.id,synapseId:B.synapse.innovation,newSynapse1Id:D.innovation,newSynapse2Id:z.innovation})}},e.prototype.isSynapseInHiddenWithId=function(e){for(var t=0,n=this.hidden;t<n.length;t++)for(var r=n[t],i=0,s=r.synapses;i<s.length;i++){var o=s[i];if(o.innovation===e)return{result:!0,weight:o.weight}}return{result:!1,weight:0}},e.prototype.isSynapseInOutputWithId=function(e){for(var t=0,n=this.output.synapses;t<n.length;t++){var r=n[t];if(r.innovation===e)return{result:!0,weight:r.weight}}return{result:!1,weight:0}},e.prototype.findNeuronWithId=function(e){if(this.output.id===e)return this.output;for(var t=0,n=this.inputs;t<n.length;t++){var r=n[t];if(r.id===e)return r}for(var i=0,s=this.hidden;i<s.length;i++){var r=s[i];if(r.id===e)return r}throw"Neuron not found!"},e.prototype.doesNeuronExist=function(e){for(var t=0,n=this.hidden;t<n.length;t++){if(n[t].id===e)return!0}return!1},e.prototype.deepCopy=function(){for(var t=new e,n=0,r=this.inputs;n<r.length;n++){var i=r[n];t.inputs.push(i.clone())}for(var s=0,o=this.hidden;s<o.length;s++){var i=o[s];t.hidden.push(i.clone())}t.output=this.output.clone();for(var a=0,u=this.hidden;a<u.length;a++)for(var i=u[a],h=0,p=i.synapses;h<p.length;h++){var l=p[h],v=t.findNeuronWithId(l.origin.id),d=t.findNeuronWithId(i.id),f=l.clone(v);d.synapses.push(f)}for(var g=0,c=this.output.synapses;g<c.length;g++){var l=c[g],v=t.findNeuronWithId(l.origin.id),f=l.clone(v);t.output.synapses.push(f)}return t.fitness=this.fitness,t},e.prototype.serialize=function(){for(var e=[],t=[],n=0,r=this.inputs;n<r.length;n++){var i=r[n];t.push({id:i.id,value:i.value})}for(var s=[],o=0,a=this.hidden;o<a.length;o++){var i=a[o];s.push({id:i.id,value:i.value});for(var u=0,h=i.synapses;u<h.length;u++){var p=h[u];e.push({innovation:p.innovation,weight:p.weight,enabled:p.enabled,originId:p.origin.id,targetId:i.id})}}for(var l={id:this.output.id,value:this.output.value},v=0,d=this.output.synapses;v<d.length;v++){var p=d[v];e.push({innovation:p.innovation,weight:p.weight,enabled:p.enabled,originId:p.origin.id,targetId:this.output.id})}return{inputs:t,hidden:s,output:l,synapses:e,fitness:this.fitness}},e.prototype.toString=function(){console.log("inputs:");for(var e=0,t=this.inputs;e<t.length;e++){var n=t[e];console.log("value:",n.value);for(var r=0,i=n.synapses;r<i.length;r++){var s=i[r];console.log("\tweight:",s.weight)}}console.log("hidden:");for(var o=0,a=this.hidden;o<a.length;o++){var n=a[o];console.log("value:",n.value);for(var u=0,h=n.synapses;u<h.length;u++){var s=h[u];console.log("\tweight:",s.weight)}}console.log("ouput:"),console.log("value:",this.output.value);for(var p=0,l=this.output.synapses;p<l.length;p++){var s=l[p];console.log("\tweight:",s.weight)}},e}();t.Network=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){void 0===t&&(t=[]),this.value=0,this.calculating=!1,this.id=e,this.synapses=t}return e.prototype.clone=function(){var t=new e(this.id);return t.value=this.value,t},e.prototype.getValue=function(){if(0===this.synapses.length)return this.value;if(!0===this.calculating)return 1/(1+Math.exp(-4.9*this.value));this.calculating=!0;for(var e=0,t=0,n=this.synapses;t<n.length;t++){var r=n[t];r.enabled&&(e+=r.origin.getValue()*r.weight)}return this.value=e,1/(1+Math.exp(-4.9*this.value))},e}();t.Neuron=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.weight=2*Math.random()-1,this.enabled=!0,this.innovation=e,this.origin=t}return e.prototype.clone=function(t){var n=new e(this.innovation,t);return n.weight=this.weight,n.enabled=this.enabled,n},e}();t.Synapse=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.currentNeuronId=0,this.currentSynapseId=0,this.synapseMutations=[],this.neuronMutations=[]}return e}();t.Globals=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1),s=n(6),o=n(7),a=function(){function e(){this.speciesArray=[],this.currentStep=0}return e.prototype.init=function(e){this.currentStep=e.step,this.bestNetwork=s.deserializeNetwork(e.bestNetwork);for(var t=0,n=e.speciesArray;t<n.length;t++){var r=n[t],i=s.deserializeNetwork(r.representant),a=new o.Species(i);a.networks.push(i);for(var u=0,h=r.networks;u<h.length;u++){var p=h[u];a.networks.push(s.deserializeNetwork(p))}a.averageFitness=r.averageFitness,a.desiredPopulation=r.desiredPopulation,this.speciesArray.push(a)}this.printResults()},e.prototype.initBasic=function(){var e=new i.Network;e.initBasicNetwork(),this.bestNetwork=e,this.bestNetwork.fitness=0;var t=new o.Species(e);t.networks.push(e),this.speciesArray.push(t);for(var n=0;n<r.CONFIG.networksNumber-1;n++){var s=new i.Network;s.initBasicNetwork(),t.networks.push(s)}this.printResults()},e.prototype.printResults=function(){for(var e=[],t=0,n=this.speciesArray;t<n.length;t++){var i=n[t];e.push(i.serialize())}process.send(JSON.stringify({step:this.currentStep,bestNetwork:this.bestNetwork.serialize(),speciesArray:e,globals:r.GLOBALS,config:r.CONFIG}))},e.prototype.run=function(){for(var e=this.inputData[Math.floor(Math.random()*this.inputData.length)].data,t=0,n=0,i=this.speciesArray;n<i.length;n++){var s=i[n];s.averageFitness=0;for(var a=0,u=s.networks;a<u.length;a++){var h=u[a];h.fitness+=500;for(var p=void 0,l=0,v=e;l<v.length;l++){var d=v[l];h.inputs[0].value=d.value,h.inputs[1].value=d.volume;var f=h.evaluate();if(f>.9&&void 0===p)p=d.value;else if(f<.1&&void 0!==p){var g=d.value-p-38;h.fitness+=g,p=void 0}}h.fitness/=2,s.averageFitness+=h.fitness}s.averageFitness=s.averageFitness/s.networks.length,s.averageFitness>0&&(t+=s.averageFitness)}for(var c=0,y=this.speciesArray;c<y.length;c++){var s=y[c];s.desiredPopulation=Math.floor(s.averageFitness/t*r.CONFIG.networksNumber),s.desiredPopulation<0&&(s.desiredPopulation=1)}this.currentStep%500==0&&(this.printResults(),console.log(this.currentStep)),this.culling();for(var w=0,N=this.speciesArray;w<N.length;w++){var s=N[w];s.networks[0].fitness>this.bestNetwork.fitness&&(this.bestNetwork=s.networks[0].deepCopy())}for(var I=0,S=this.speciesArray;I<S.length;I++)for(var s=S[I],O=s.networks.length;O<s.desiredPopulation;){var b=s.networks[Math.floor(Math.random()*s.networks.length)],k=s.networks[Math.floor(Math.random()*s.networks.length)],M=this.crossover(b,k);M.mutate();for(var L=!1,G=0,A=this.speciesArray;G<A.length;G++){var m=A[G];if(m.inSpecies(M)){m.networks.push(M),L=!0;break}}if(!L){var F=new o.Species(M);F.networks.push(M),this.speciesArray.push(F)}O++}this.currentStep++},e.prototype.culling=function(){for(var e=0,t=this.speciesArray;e<t.length;e++){var n=t[e];n.networks.sort(function(e,t){return t.fitness-e.fitness});var i=Math.floor(n.networks.length*r.CONFIG.cullingPercent);n.networks.splice(n.networks.length-i,i)}},e.prototype.crossover=function(e,t){var n,r;e.fitness>=t.fitness?(n=e,r=t):(n=t,r=e);for(var s=new i.Network,o=0,a=n.inputs;o<a.length;o++){var u=a[o];s.inputs.push(u.clone())}for(var h=0,p=n.hidden;h<p.length;h++){var u=p[h];s.hidden.push(u.clone())}s.output=n.output.clone();for(var l=0,v=n.hidden;l<v.length;l++)for(var u=v[l],d=0,f=u.synapses;d<f.length;d++){var g=f[d],c=r.isSynapseInHiddenWithId(g.innovation);if(c.result){var y=s.findNeuronWithId(g.origin.id),w=s.findNeuronWithId(u.id),N=g.clone(y),I=Math.random();I<.5&&(N.weight=c.weight),w.synapses.push(N)}else{var y=s.findNeuronWithId(g.origin.id),w=s.findNeuronWithId(u.id),N=g.clone(y);w.synapses.push(N)}}for(var S=0,O=n.output.synapses;S<O.length;S++){var g=O[S],c=r.isSynapseInOutputWithId(g.innovation);if(c.result){var y=s.findNeuronWithId(g.origin.id),N=g.clone(y),I=Math.random();I<.5&&(N.weight=c.weight),s.output.synapses.push(N)}else{var y=s.findNeuronWithId(g.origin.id),N=g.clone(y);s.output.synapses.push(N)}}return s},e.prototype.testChildNetworkNoSynapses=function(e,t,n){for(var r=0,i=n.hidden;r<i.length;r++){var s=i[r];if(0===s.synapses.length){for(var o=0,a=0,u=n.hidden;a<u.length;a++)for(var h=u[a],p=0,l=h.synapses;p<l.length;p++){var v=l[p];v.origin.id===s.id&&o++}for(var d=0,f=n.output.synapses;d<f.length;d++){var v=f[d];v.origin.id===s.id&&o++}if(0===o)throw this.testPrintDebug(e,t,n),"Neuron has 0 synapses!"}}},e.prototype.testChildNetworkDoubleNeurons=function(e,t,n){for(var r=[],i=0,s=n.hidden;i<s.length;i++){var o=s[i];if(-1!==r.indexOf(o.id))throw this.testPrintDebug(e,t,n),"Network has multiple neurons with same id!";r.push(o.id)}},e.prototype.testPrintDebug=function(e,t,n){var r=new o.Species(e);e.fitness=1,r.networks.push(e);var i=new o.Species(t);t.fitness=1,i.networks.push(t),n.fitness=0;var s=new o.Species(n);s.networks.push(n),this.speciesArray=[r,i,s]},e}();t.Runner=a},function(e,t,n){"use strict";function r(e){for(var t=[],n=0,r=e.inputs;n<r.length;n++){var u=r[n],h=Object.create(o.Neuron.prototype);h.calculating=!1,h.synapses=[],h.id=u.id,h.value=u.value,t.push(h)}for(var p=[],l=0,v=e.hidden;l<v.length;l++){var u=v[l],h=Object.create(o.Neuron.prototype);h.calculating=!1,h.synapses=[],h.id=u.id,h.value=u.value,p.push(h)}var d=Object.create(o.Neuron.prototype);d.calculating=!1,d.synapses=[],d.id=e.output.id,d.value=e.output.value;for(var f=0,g=e.synapses;f<g.length;f++){var c=g[f],y=i(c.originId,t,p,d),w=i(c.targetId,t,p,d),N=Object.create(a.Synapse.prototype);N.innovation=c.innovation,N.weight=c.weight,N.enabled=c.enabled,N.origin=y,w.synapses.push(N)}var I=Object.create(s.Network.prototype);return I.fitness=e.fitness,I.inputs=t,I.hidden=p,I.output=d,I}function i(e,t,n,r){for(var i=0,s=t;i<s.length;i++){var o=s[i];if(o.id===e)return o}for(var a=0,u=n;a<u.length;a++){var o=u[a];if(o.id===e)return o}if(r.id===e)return r;throw"NEURON NOT FOUND"}Object.defineProperty(t,"__esModule",{value:!0});var s=n(1),o=n(2),a=n(3);t.deserializeNetwork=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(e){this.networks=[],this.averageFitness=0,this.desiredPopulation=0,this.representant=e}return e.prototype.inSpecies=function(e){for(var t=r.CONFIG.sameSpeciesThreshold,n=r.CONFIG.c1,i=r.CONFIG.c2,s=r.CONFIG.c3,o=0,a=0,u=0,h=0,p=0,l=0,v=0,d=this.representant.hidden;v<d.length;v++)for(var f=d[v],g=0,c=f.synapses;g<c.length;g++){var y=c[g];y.innovation>p&&(p=y.innovation),l++}for(var w=0,N=this.representant.output.synapses;w<N.length;w++){var y=N[w];y.innovation>p&&(p=y.innovation),l++}for(var I=0,S=0,O=0,b=e.hidden;O<b.length;O++)for(var k=b[O],M=0,L=k.synapses;M<L.length;M++){var G=L[M];G.innovation>I&&(I=G.innovation),S++}for(var A=0,m=e.output.synapses;A<m.length;A++){var G=m[A];G.innovation>I&&(I=G.innovation),S++}var F=Math.min(p,I);h=Math.max(l,S);for(var B=0,P=0,C=this.representant.hidden;P<C.length;P++)for(var f=C[P],_=0,j=f.synapses;_<j.length;_++){for(var y=j[_],W=!1,D=0,x=e.hidden;D<x.length;D++)for(var k=x[D],z=0,R=k.synapses;z<R.length;z++){var G=R[z];y.innovation===G.innovation&&(W=!0,B++,u+=Math.abs(y.weight-G.weight))}W||(y.innovation>F?o++:a++)}for(var V=0,E=this.representant.output.synapses;V<E.length;V++){for(var y=E[V],W=!1,J=0,T=e.output.synapses;J<T.length;J++){var G=T[J];if(y.innovation===G.innovation){W=!0,B++,u+=Math.abs(y.weight-G.weight);break}}W||(y.innovation>F?o++:a++)}for(var H=0,U=e.hidden;H<U.length;H++)for(var k=U[H],q=0,K=k.synapses;q<K.length;q++){for(var G=K[q],W=!1,Q=0,X=this.representant.hidden;Q<X.length;Q++)for(var f=X[Q],Y=0,Z=f.synapses;Y<Z.length;Y++){var y=Z[Y];y.innovation===G.innovation&&(W=!0)}W||(G.innovation>F?o++:a++)}for(var $=0,ee=e.output.synapses;$<ee.length;$++){for(var G=ee[$],W=!1,te=0,ne=this.representant.output.synapses;te<ne.length;te++){var y=ne[te];if(y.innovation===G.innovation){W=!0;break}}W||(G.innovation>F?o++:a++)}return u/=B,(n*o+i*a)/h+s*u<t},e.prototype.serialize=function(){for(var e=[],t=0,n=this.networks;t<n.length;t++){var r=n[t];e.push(r.serialize())}return{representant:this.representant.serialize(),networks:e,averageFitness:this.averageFitness,desiredPopulation:this.desiredPopulation}},e}();t.Species=i}]);